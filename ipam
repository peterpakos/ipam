#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
IP Address Manager (NIPAP Client)

Copyright (C) 2017 Peter Pakos <peter.pakos@wandisco.com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

from __future__ import print_function
import os
import sys
import argparse
from CONFIG import CONFIG
import pynipap
from pynipap import Prefix, VRF


class Main(object):
    VERSION = '1.1.0'

    def __init__(self):
        self._args = self._parse_args()

        pynipap.xmlrpc_uri = 'http://%s:%s@%s:%s/XMLRPC' % (
            CONFIG.NIPAP_USER,
            CONFIG.NIPAP_PASS,
            CONFIG.NIPAP_HOST,
            CONFIG.NIPAP_PORT
        )
        pynipap.AuthOptions({'authoritative_source': 'ipam_cli_client'})

    def _parse_args(self):
        parser = argparse.ArgumentParser(description='IP Address Manager (NIPAP Client)', add_help=False)
        parser.add_argument('--version', action='version',
                            version='%s %s' % (os.path.basename(sys.argv[0]), self.VERSION))
        parser.add_argument('--help', action='help', help='show this help message and exit')

        command = parser.add_subparsers(title='commands', dest='command')

        parser_vrf = command.add_parser('vrf', help='manage VRFs')
        parser_vrf_subparser = parser_vrf.add_subparsers(title='vrf commands', dest='subcommand')
        parser_vrf_subparser.add_parser('list', help='display list of VRFs')

        parser_prefix = command.add_parser('prefix', help='manage prefixes')
        parser_prefix_subparser = parser_prefix.add_subparsers(title='prefix commands', dest='subcommand')
        parser_prefix_subparser.add_parser('list', help='display list of prefixes')
        parser_prefix_search = parser_prefix_subparser.add_parser('search', help='search prefixes')
        parser_prefix_search.add_argument('query', help='search query')

        parser_search = command.add_parser('search', help='search prefixes (shortcut for "prefix search")')
        parser_search.add_argument('query', help='search query')
        parser_search.set_defaults(command='prefix', subcommand='search')

        return parser.parse_args()

    @staticmethod
    def die(message=None, code=1):
        if message:
            print(message, file=sys.stderr)
        exit(code)

    def run(self):
        getattr(self, '_%s_%s' % (self._args.command, self._args.subcommand))()

    @staticmethod
    def _vrf_list():
        print('%-20s%-20s%-30s\n%s' % ('RT', 'Name', 'Description', '-'*80))
        for vrf in VRF.list():
            print('%-20s%-20s%-20s' % (vrf.rt or '', vrf.name or '', vrf.description or ''))

    def _prefix_list(self):
        self._display_prefix_list(Prefix.list())

    def _prefix_search(self, query=''):
        if hasattr(self._args, 'query'):
            query = self._args.query
        search_result = Prefix.smart_search(query)
        prefix_objects = search_result['result']

        self._display_prefix_list(prefix_objects)

    @staticmethod
    def _display_prefix_list(prefix_objects):
        type_map = {
            'reservation': 'R',
            'assignment': 'A',
            'host': 'H'
        }
        print('%-5s%-20s%-20s%-6s%-30s\n%s' % ('VRF', 'Prefix', 'Node', 'Type', 'Description', '-'*80))
        for po in prefix_objects:
            print('%-5s%-20s%-20s%-6s%-30s' % (
                po.vrf.rt or '',
                po.display_prefix or '',
                po.node or '',
                type_map[po.type],
                po.description or ''
            ))


if __name__ == '__main__':
    try:
        Main().run()
    except KeyboardInterrupt:
        print('\nCancelling...')
